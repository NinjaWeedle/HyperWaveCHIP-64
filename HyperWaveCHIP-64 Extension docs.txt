HyperWaveCHIP-64 specification

By oxiti8

This extension builds off of HYPERCHIP-64, which builds off of XO-CHIP 1.1.

At minimum, an XO-CHIP 1.1 implementation is required to implement HyperWaveCHIP-64.

NEW OPS:

00En RANGE:

	00E1: INVERT - NOT the contents of the the currently selected bit plane.

00Fn RANGE:

	00F1: OR MODE - Enable OR mode drawing. (Pixels are not erased during DXYN, even if a collision occurs. VF is still set to 1 if collision and 0 otherwise)

	00F2: ERASE MODE - Enable ERASE mode drawing. (Only erases pixels during DXYN if a collision occurs, and does not turn any pixels on. VF is still set to 1 if collision and 0 otherwise)

	00F3: XOR MODE - Enable XOR mode drawing. (XOR is the default drawing mode. )

5XYn RANGE:

	5XY1: SKP VX > VY - Skip if VX > VY. Will also skip over the F000 instruction (long i). Inherited from CHIP8E.

8XYn RANGE:

	8XYC: MULT VX, VY - Set VX to VX * VY. Set VF to higher 8 bits of the product, and set VX to (VX modulo 256). If not, set VF to 0.

	8XYD: DIV VX, VY - VX = VX // VY. VF = VX % VY. If VY = 0 at the start of the opcode, set BOTH VX and VF to 0. Prevents division by zero.

	8xyF: DIV VY, VX - VX = VY // VX. VF = VY % VX. If VX = 0 at the start of the opcode, set BOTH VX and VF to 0. Prevents division by zero.

Fnnn RANGE:

	FN03: PALETTE N - Set color of palette n to 3-byte (24-bit) RRGGBB value located at I in memory. Set RGB8 color for plane # N to palette located at I

Fn00 RANGE:

	F100 NNNN: LONG JUMP -  Set PC to NNNN.

	F200 NNNN: LONG CALL SUBROUTINE. Store PC in stack, then set PC to NNNN.

	F300 NNNN: LONG JUMP0. Set PC to NNNN + V0. 

IMPORTANT: Skip instructions should double skip over F100, F200, and F300 in the same way as they double skip over F000 in XO-CHOP

For FN03, the value of N (Ranging from 0-15) represents which palette is being modified. Here's a guide:
N = 0: The palette used for the Background color (Background in Octo)
N = 1: The palette for Plane 1 only (Foreground 1 in Octo)
N = 2: The palette for Plane 2 only (Foreground 2 in Octo)
N = 3: The palette for Plane 3 (Blended in Octo)
The structure of the opcode allows for 4 bitplanes and 16 colors maximum.

The actual color palette data itself is stored as 3 bytes in RRGGBB format, allowing for 8-bit color depth.

Accessing the bytes in memory that contain the color data is handled much like how you would handle accessing sprite or audio sample data- Here is an example in Octo:

: main
i := green # i points to the location of the color data in memory.
0xF0 0x03 # FN03. N is 0, so the background palette is selected to be modified, and the palette for the background is set to the RRGGBB value stored at i in memory (In this case, 0x00 0xFF 0x00, the color green. The palette used for the background is changed to #00FF00.)

: green
0x00 0xFF 0x00 # RRGGBB format color data.




SOME PSEUDOCODE TRANSLATIONS FOR LANGUAGES THAT ARE NOT SCRATCH:

"Vf is set to Floor of (result / 256)" translates to "Vf = (int) (result / 256);" in a language like Java.

"value1 modulo value2" translates to "value1 % value2" in a language like Java. 
